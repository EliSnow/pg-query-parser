// Generated by CoffeeScript 1.10.0
(function() {
  var EXIT, _, all, byType, clean, first, tables, walk;

  _ = require('lodash');

  EXIT = {};

  walk = function(obj, func) {
    var i, j, k, len, len1, o, results1, results2, v;
    if (_.isArray(obj)) {
      for (i = 0, len = obj.length; i < len; i++) {
        o = obj[i];
        if (func(obj, o) === EXIT) {
          return o;
        }
      }
      results1 = [];
      for (j = 0, len1 = obj.length; j < len1; j++) {
        o = obj[j];
        results1.push(walk(o, func));
      }
      return results1;
    } else if (_.isObject(obj)) {
      for (k in obj) {
        v = obj[k];
        if (func(obj, k, v) === EXIT) {
          return obj;
        }
      }
      results2 = [];
      for (k in obj) {
        v = obj[k];
        results2.push(walk(v, func));
      }
      return results2;
    } else {
      if (func(obj) === EXIT) {
        return obj;
      }
    }
  };

  first = function(obj, func) {
    return walk(obj, function(obj, key, value) {
      if (func(obj, key, value)) {
        return EXIT;
      }
    });
  };

  all = function(obj, func) {
    var results;
    results = [];
    walk(obj, function(obj, key, value) {
      if (func(obj, key, value)) {
        return results.push(obj);
      }
    });
    return results;
  };

  clean = function(tree) {
    walk(tree, function(obj, k, v) {
      if (_.isArray(obj)) {
        return;
      }
      if (k === 'location') {
        return delete obj.location;
      }
    });
    return tree;
  };

  tables = function(query) {
    return all(query, function(obj, key, value) {
      return key === 'RANGEVAR';
    });
  };

  byType = function(obj, type) {
    return all(obj, function(obj, key, value) {
      return key === type;
    });
  };

  module.exports = {
    walk: walk,
    first: first,
    all: all,
    clean: clean,
    tables: tables,
    byType: byType
  };

}).call(this);
